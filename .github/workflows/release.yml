name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Build and upload binaries
  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: quizlr-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: quizlr-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: quizlr-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: quizlr-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/quizlr${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

  # Build and deploy web app
  deploy-web:
    name: Deploy Web App
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          
      - name: Install trunk
        uses: jetli/trunk-action@v0.4.0
        with:
          version: 'v0.21.7'
          
      - name: Build web app
        run: |
          cd quizlr-web
          trunk build --release
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./quizlr-web/dist

  # Deploy documentation
  deploy-docs:
    name: Deploy Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install mdBook
        run: cargo install mdbook
        
      - name: Build docs
        run: |
          cd docs
          mdbook build
          
      - name: Deploy to GitHub Pages (docs)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/book
          destination_dir: docs

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: [build-binaries, deploy-web, deploy-docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Publish quizlr-core
        run: |
          cd quizlr-core
          cargo publish --token ${{ secrets.CARGO_TOKEN }} || true
          
      - name: Wait for crates.io
        run: sleep 30
        
      - name: Publish quizlr-web
        run: |
          cd quizlr-web
          cargo publish --token ${{ secrets.CARGO_TOKEN }} || true